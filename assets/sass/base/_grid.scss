/******
LK Grid
-------------------------------------------
For IE8, use in conjunction with Respond.js
https://github.com/scottjehl/Respond

Note: Respond.js only understands min-width / max-width media queries
******/

/* 1. Grid elements */

$gutter:30px;
$columns: 12 !default;
//$gutter: 0.5rem !default;

$class-row: 'row' !default;
$class-col: 'col' !default;
$class-off: 'off' !default;
$breakpoints: (
    (xs),
    (sm, 768px),
    (md, 992px),
    (lg, 1200px)
) !default;

@function get-col-percent($column-num) {
  @return $column-num / $columns * 100%;
}
@mixin spacing( $value, $type: margin, $orientation: vertical ) {
  @if $orientation == vertical {
    #{ $type }-top: $value;
    #{ $type }-bottom: $value;
  } @else {
    #{ $type }-left: $value;
    #{ $type }-right: $value;
  }
}

.#{$class-row} {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  @include spacing(( -$gutter/2 ), margin, horizontal );
}
%#{$class-col} {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  @include spacing(( $gutter/2 ), padding, horizontal );
}
%#{$class-col}-flex {
  @extend %#{ $class-col };
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}


@mixin grid-base( $namespace ) {
  .#{ $class-col }-#{$namespace} {
    @extend %#{ $class-col }-flex;
  }

  @for $i from 1 through $columns {
    .#{ $class-col }-#{$namespace}-#{$i} {
      @extend %#{ $class-col };
    }
  }
}
@mixin grid-sizes( $namespace ) {
  // Run the loop for as many columns as speficied
  @for $i from 1 through $columns {
    .#{ $class-col }-#{$namespace}-#{$i} {
      flex-basis: get-col-percent($i);
      max-width:  get-col-percent($i);
    }
  }
  @for $i from 1 through $columns {
    // Don't include the .off class for the last column
    @if ( $i != $columns ) {
      .#{ $class-off }-#{$namespace}-#{$i} {
        margin-left: get-col-percent($i);
      }
    }

  }

}

@each $val in $breakpoints {
    $namespace: nth($val, 1);
    @include grid-base( $namespace );
}
@each $val in $breakpoints {
    @if length($val) == 1 {
        $namespace: nth($val, 1);
        @include grid-sizes( $namespace );
    } @else {
        $namespace: nth($val, 1);
        $size: nth($val, 2);
        @media only screen and (min-width: #{$size}) {
            @include grid-sizes( $namespace );
    }
  }
}

.container {
  position: relative;
  margin: 0 auto 0;
  padding: 0;
  z-index: 3;
  @include clearfix();
}
//.row {
//  display:flex;
//  flex-direction:row;
//  flex-wrap:nowrap;
//  flex-flow:flex-start;
//  align-items: stretch;
//  margin-left:-$gutter/2;
//  margin-right:-$gutter/2;
//  @include clearfix();
//  &--centered {
//    align-items:center;
//  }
//}
//.column, [class^=col] {
//  @include border-box();
//  padding-right:$gutter/2;
//  padding-left:$gutter/2;
//}
//@for $i from 1 through 12 {
//  .col-#{$i} {
//    flex-basis: $i/12 * 100%;
//  }
//}
//
//@mixin row() {}
//@mixin col ($col, $sum, $gap: 1em, $align: top, $first: false, $last: false) {
//    width: 100%;
//    display: inline-block;
//    font-size: 16px;
//    padding-left: if($first, 0, $gap);
//    padding-right: if($last, 0, $gap);
//    @media only screen and (min-width: 768px) {
//        width: percentage($col/$sum);
//        vertical-align: $align;
//    }
//    &.fluid { width: percentage($col/$sum); }
//}




//
//.column, .col-full, .col-1-2, .col-1-3, .col-2-3,
//.col-1-4, .col-3-4, .col-1-5, .col-2-5, .col-3-5, .col-1-6 {
//  float: left;
//  padding: 15px;
//  @include border-box();
//  display: inline;
//}
//.row, .col-wrap{
//  width: 100%;
//  margin-left: auto;
//  margin-right: auto;
//  padding: 0 !important;
//  @include clearfix();
//}
//
//
//
//
//.col-full {
//  width: 100%;
//}
//
//.col-1-2 {
//  width: 50%;
//}
//.col-1-3 {
//  width: 33.33333333333333%;
//}
//.col-2-3 {
//  width: 66.66666666666666%;
//}
//.col-1-4 {
//  width: 25%;
//}
//.col-3-4 {
//  width: 75%;
//}
//.col-1-5 {
//  width: 20%;
//}
//.col-2-5 {
//  width: 40%;
//}
//.col-3-5 {
//  width: 60%;
//}
//.col-1-6 {
//  width: 16.666666666666664%;
//}
//

/* 2. Media queries */
//
//@media screen and (max-width: 800px) {
//  .container {
//    max-width: 780px;
//  }
//  .column, .col-full, .col-1-2, .col-1-3, .col-2-3, .col-1-4, .col-3-4, .col-1-5, .col-2-5, .col-3-5, .col-1-6 {
//    padding: 10px;
//  }
//}
//@media screen and (max-width: 640px) {
//  .container {
//    max-width: 100%;
//  }
//  .column, .col-full, .col-1-2, .col-1-3, .col-2-3, .col-1-4, .col-3-4, .col-1-5, .col-2-5, .col-3-5, .col-1-6 {
//    float: none;
//    width: 100%;
//  }
//}
//@media screen and (max-device-width: 540px) {
//  .container {
//    max-width: 540px;
//    padding: 10px;
//  }
//}
//@media screen and (max-width: 320px) {
//  .container {
//    max-width: 300px;
//    padding: 10px;
//  }
//}
//@media (min-width: 768px) {
//  .container {
//    width: 750px;
//  }
//}
//@media (min-width: 992px) {
//  .container {
//    width: 970px;
//  }
//}
//@media screen and (max-width: 1024px) {
//  .container {
//    max-width: 960px;
//  }
//  .column, .col-full, .col-1-2, .col-1-3, .col-2-3, .col-1-4, .col-3-4, .col-1-5, .col-2-5, .col-3-5, .col-1-6 {
//    padding: 15px;
//  }
//}
//@media (min-width: 1200px) {
//  .container {
//    width: 1170px;
//  }
//}
